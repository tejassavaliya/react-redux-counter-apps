{"version":3,"sources":["App.js","actions/index.js","serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","isLogged","dispatch","useDispatch","className","onClick","type","Boolean","window","location","hostname","match","counterReducer","action","loggedReducer","allReducers","combineReducers","store","createStore","allReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAoBeA,MAhBf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAa,SAAAC,GAAK,OAAIA,EAAMC,YACvCC,EAAWC,cACjB,OACE,yBAAKC,UAAU,OACb,yCAAeN,EAAf,KACEG,EAAW,qEAAiD,GAE9D,4BAAQI,QAAS,kBAAMH,ECZlB,CACHI,KAAM,gBDWR,KACA,sCACA,4BAAQD,QAAS,kBAAMH,ECRlB,CACHI,KAAM,gBDOR,OEHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCRSC,EAVQ,WAAuB,IAArBZ,EAAoB,uDAAd,EAAGa,EAAW,uCACzC,OAAOA,EAAOP,MACV,IAAK,YACD,OAAON,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,QACI,OAAOA,ICEJc,EATO,WAA6B,IAA3Bd,EAA0B,wDAAXa,EAAW,uCAC9C,OAAOA,EAAOP,MACV,IAAK,UACD,OAAQN,EACZ,QACI,OAAOA,ICIJe,EALKC,YAAgB,CAChClB,QAASc,EACTX,SAAUa,ICERG,EAAQC,YACZC,EACAX,OAAOY,8BAAgCZ,OAAOY,gCAIhDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SJiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ac61f8d7.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement } from './actions'\n\nfunction App() {\n  const counter = useSelector(state => state.counter);\n  const isLogged = useSelector( state => state.isLogged );\n  const dispatch = useDispatch();\n  return (\n    <div className=\"App\">\n      <h1>Counter : {counter} </h1>\n      { isLogged ? <h3> Valuable Information I shouldn't see</h3> : '' }\n      \n      <button onClick={() => dispatch(increment())}>+</button>\n      <span>&nbsp;</span>\n      <button onClick={() => dispatch(decrement())}>-</button>\n    </div>\n  );\n}\n\nexport default App;\n","export const increment = () => {\r\n    return {\r\n        type: 'INCREMENT'\r\n    }\r\n}\r\n\r\nexport const decrement = () => {\r\n    return {\r\n        type: 'DECREMENT'\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const counterReducer = ( state=0, action) => {\r\n    switch(action.type) {\r\n        case 'INCREMENT':\r\n            return state + 1;\r\n        case 'DECREMENT':\r\n            return state - 1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default counterReducer;","const loggedReducer = ( state = false, action) => {\r\n    switch(action.type) {\r\n        case 'SIGN_IN':\r\n            return !state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default loggedReducer;","import counterReducer from './counter';\r\nimport loggedReducer from './isLogged';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    counter: counterReducer,\r\n    isLogged: loggedReducer\r\n});\r\n\r\nexport default allReducers","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport allReducer from './reducers';\r\nimport { Provider } from 'react-redux';\r\nconst store = createStore(\r\n  allReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  );\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}